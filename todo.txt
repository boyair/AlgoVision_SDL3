- fix camera motion when skipping around
(move mtion ownership to the op manger)
 - place all states of a heap block in the block structure instead of replacing the block with a deep copy:
    saves performance and will make moving them aroun easier.
 - add tint where a block will be placed in the future.
 - implement pointers for heap (with arrows)
 - add ability to move around heap blocks with mouse
 - improve location setting for heap allocations (BIG) (possiblyrequire bit arene to know which spots are taken)
 (the algorithm is good but not optimized and dosent support edge cases like out of bounds)


// probably wont be done
idea for spacefinder (possible because places are set before the user can move blocks arount and the structure wont collapse):
tagged union step (need a better name) {
 rect: *rectinfo,
 free: void,
 blocked: void,
}

struct rectinfo{
rect: Rect
distance_from_center: f32 / f64
const up: step
const down: step
const left: step
const right: step

fn traverse(self)
{
//find nearest to center (maybe consider size too)
run traverse(nearest) recursively until found free.
// can be modified to create cool patterns
}
}
